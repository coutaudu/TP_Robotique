#+TITLE:L3ProAII Régulation Industrielle -  TP Régulation de temperature de l'eau d'un bac.
#+AUTHOR:BOUFADENE Mehdi COUTAUD Ulysse
#+DATE:<2022-03-30 Wed>
# #+LATEX_HEADER:\usepackage[margin=0.7in]{geometry}
#+LATEX: \newpage

* Prise en main et première simulation de picking
** Mise en place d'une scène basique
+ Nous avons mis en place une scène basique pour un premier scénario de simulation d'un robot.
TODO Figure 1.
+ Le robot placé au centre est équipé d'une pince non-commandable.
+ Le robot est entouré par 2 plateaux qui seront les zones de prise et de dépose des objets.
+ Nous avons positionné le repère UTool de la pince installé sur le robot en extrémité de ces pinces.
+ Les zones de dépot sont bien dans la zone de travail du robot équipé de cette pince et vis à vis du point de repère Utool de cette pince.
TODO figure 2.           
+ Nous avons positionné 2 boites sur les plateaux et avons paramétré leur orientation de manière à ce que le robot puisse se positionner pour les attraper par le haut.
TODO figure 3: le robot en position d'interaction avec la boite sur le plateau 1
TODO figure 4: le robot en position d'interaction avec la boite sur le plateau 2

** Programme et simulation d'un programme de picking simple
+ Nous avons implémenté un programme /Manutention/ sur ce robot qui réalise une tâche de picking simple, càd le robot va prendre la boite sur le /plateau1/ et aller la déposer sur le /plateau2/.
+ Pour les mouvements principaux ("longue distance") nous utilisons des mouvement de type /[J]/ qui laissent libre choix au robot de ses mouvements afin de passer d'une position à la suivante car cela est plus rapide pour le robot.
+ Pour les mouvements en phase d'approche, càd le dernier mouvement de descente pour saisir la boite, nous utilisons des mouvements de type /[L]/ qui forcent le robot à réaliser des mouvement rectilignes.
+ La figure 5 montre le déroulé et l'éxécution de notre programme /Manutention/.
TODO figure5: Déroulé et éxécution du programme /Manutention/.

* Ajout d'un effecteur
** Mise en place d'un outil de préhension
+ Nous avons paramétré un nouvel outil sur l'effecteur du robot: une pince commandable.
  La mise en place à consisté à :
  + "constituer" la pince à partir de 3 objets CAD,
  + mettre à l'échelle pour être coérent avec le reste de notre déployement, cad la taille des boites,
  + parametrer le repère Utool de la nouvelle pince pour que cela corresponde à la nouvelle pince.
+ La figure 6 montre la nouvelle pince commandable installée.
TODO figure 6: Nouvelle pince /Servo_Hand/ installée sur le préhenseur du robot.
+ Nous avons testé la non-régression en applicant le premier programme /Manutention/ réalisé précedemment avec la nouvelle pince.

** Programmation de la commande du préhenseur
*** Lier la pinces aux E/S sorties du robot   
+ Nous avons parametré le comportement des 2 mors de la pièce afin de mettre en place commande d'ouverture et une commande de fermeture:
  + ServoHandA1 Inputs (Actionne le mors 1 si la commande est reçue de la part du robot sur le bit DO[1]):
    + Si (RobotController1.DigitalOutput[1])  { Position=-50}
    + Si (!RobotController1.DigitalOutput[1]) { Position=0}  
  + ServoHandA1 Outputs (donne l'état d'ouverte totale sur le bit DI[1] et l'état de fermeture totale sur DI[2]):
    + Si (Position=0)  { RobotController1.DigitalInput[1]=Vrai} Sinon {RobotController1.DigitalInput[1]=Faux}
    + Si (Position=-50){ RobotController1.DigitalInput[2]=Vrai} Sinon {RobotController1.DigitalInput[2]=Faux}
  + ServoHandA2 Inputs (Actionne le mors 2 si la commande est reçue de la part du robot sur le bit DO[1],cad le meme bit sur le mors 1):
    + Si (RobotController1.DigitalOutput[1])  { Position=50}
    + Si (!RobotController1.DigitalOutput[1]) { Position=0}  
  + ServoHandA2 Outputs (donne les états d'ouverte totale et de fermeture totale sur les bits DI[3] et DI[4], cela permet de prendre en charge des temps de mouvement differents pour les 2 mors notamment):
    + Si (Position=0)  { RobotController1.DigitalInput[3]=Vrai} Sinon {RobotController1.DigitalInput[3]=Faux}
    + Si (Position=-50){ RobotController1.DigitalInput[4]=Vrai} Sinon {RobotController1.DigitalInput[4]=Faux}
Les figures 7 et 8 montre le parametrage du mouvement de la pince.
TODO figure 7 et 8.

*** Programmer l'ouverture et la fermeture de la pince
**** Programme /OuvrePince/
+ Il constiste à mettre le bit DO[1] à faux pour déclencher l'ouverture des deux mors, puis attendre que les deux mors notifient l'ouverture complète par leur bits respectifs DI[1] et DI[3], voir figure 9.
+ Ce programme servira ensuite de sous-programme dans des programme plus élaborés.     
TODO figure 9

**** Programme /FermePince/
+ Il constiste à mettre le bit DO[1] à vrai pour déclencher la fermeture des deux mors, puis attendre que les deux mors notifient la fermeture complète par leur bits respectifs DI[2] et DI[4], voir figure 10.
+ Ce programme servira ensuite de sous-programme dans des programme plus élaborés.     
TODO figure 10

**** Programme de test BoucleOuvreEtFermePince
+ Pour tester le bon fonctionnement de la pince ainsi que le mécanisme d'appel de foncition nous avons implémenté un programme qui ouvre puis ferme la pince ad vitam eternam.
+ Le programme est présenté en figure 11.
TODO figure 11

**** Programme de picking avec pince commandable
+ Nous avons repris notre premier programme de manutention simple, cette fois avec la pince commandable.
+ Les actions de saisies et de relachement de l'objet transporté par le robot sont pris en compte par les appels de fonction FermerPince et OuvrirPince quand le robot est en position respectivement /PickUp/ et /Drop/.
+ La figure 12 montre notre programme en cours d'éxécution.

* Programmation de tâches conditionelles

  
